{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setmovies","useEffect","a","get","request","data","results","fetchData","className","style","color","map","movie","src","poster_path","backdrop_path","alt","name","id","API_KEY","fetchTrending","fetchToprated","fetchNetflixoriginal","fetchRomance","fetchAction","fetchComedy","fetchHorror","fetchDocumentaries","Banner","str","n","requests","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7f89b33.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL : \"https://api.themoviedb.org/3/\"\r\n})\r\n\r\nexport default instance","import React, {useState , useEffect} from 'react'\r\nimport axios from \"./axios\"\r\nimport \"./row.css\"\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchUrl , isLargeRow }) {\r\n    const [movies, setmovies] = useState([])\r\n    \r\n\r\n    useEffect(() => {\r\n      const fetchData = async  () => {\r\n          const request = await axios.get(fetchUrl)\r\n          setmovies(request.data.results)\r\n          return request\r\n        };\r\n        fetchData();\r\n    }, [fetchUrl])\r\n\r\n    return (\r\n        <div className = \"row\">\r\n            <h2 style={{ color: \"white\" }}>\r\n                {title}\r\n            </h2>\r\n            \r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${baseURL}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt={movie.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"313d67ca6eba424dab80c73b1a744a17\"\r\n\r\nconst request = {\r\n \r\n    fetchTrending: `trending/all/week?api_key=${API_KEY}`,\r\n    fetchToprated : `movie/top_rated?api_key=${API_KEY}`,\r\n    fetchNetflixoriginal: `discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchRomance: `discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchAction: `discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedy: `discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorror: `discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchDocumentaries: `discover/movie?api_key=${API_KEY}&with_genres=99`\r\n  \r\n}\r\n\r\nexport default request","import React, {useState , useEffect} from 'react'\r\nimport axios from \"./axios\";\r\nimport requests from \"./request\";\r\nimport \"./banner.css\";\r\n\r\n\r\nfunction Banner() {\r\n   const [movies , setmovies] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const request = await axios.get(requests.fetchTrending)\r\n            setmovies(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            )\r\n            return request\r\n       }\r\n       fetchData()\r\n    }, [])\r\n\r\n\r\n    const truncate = (str ,n) => {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage:`url(\r\n                    \"https://image.tmdb.org/t/p/original/${movies?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition:\"center top\"\r\n          }}\r\n        >\r\n\r\n            <div className=\"banner_contents\">\r\n                <h1>\r\n                 {movies?.title || movies?.name || movies?.original_name}   \r\n                </h1>\r\n                \r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movies?.overview , 200)}\r\n                </h1>\r\n\r\n               \r\n            </div>\r\n <div className=\"banner_fadebottom\"></div> \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useState , useEffect} from 'react'\r\nimport \"./nav.css\"\r\n\r\nfunction Nav() {\r\n    const [show ,handleShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n           if (window.scrollY > 200) {\r\n               handleShow(true)\r\n           }else handleShow(false)\r\n       } )\r\n        return () => {\r\n           window.removeEventListener(\"scroll\")\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${ show && \"nav_black\"}`}>\r\n            <img\r\n                className=\"nav_logo\"\r\n                src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                alt=\"Netflix logo\"\r\n            />\r\n\r\n            <img\r\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n                alt=\"Netflix user logo\"\r\n                className=\"nav_avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","\nimport './App.css';\nimport Row from \"./Row\"\nimport requests from \"./request\";\nimport Banner from \"./Banner\"\nimport Nav from \"./Nav\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav></Nav>\n     <Banner/>\n      <Row title=\"Now Trending\" fetchUrl={requests.fetchTrending} isLargeRow={true}></Row>\n      <Row title=\"Netflix Orignals\" fetchUrl={requests.fetchNetflixoriginal}></Row>\n      <Row title=\"Top-Rated\" fetchUrl={requests.fetchToprated}></Row>\n      <Row title=\"Romance\" fetchUrl={requests.fetchRomance}></Row>\n      <Row title=\"Action\" fetchUrl={requests.fetchAction}></Row>\n      <Row title=\"Comedy\" fetchUrl={requests.fetchComedy}></Row>\n      <Row title=\"Horror\" fetchUrl={requests.fetchHorror}></Row>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}></Row> \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}